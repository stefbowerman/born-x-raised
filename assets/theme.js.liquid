if (!window.luxon) {
  console.warn('luxon.js required for certain theme functionality')
}

window.theme = window.theme || {};

theme.icons = {
  left: '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></svg>',
  right: '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"/></svg>',
  close: '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
  chevronLeft: '<svg fill="#000000" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M 14.51,6.51 14,6 8,12 14,18 14.51,17.49 9.03,12 Z"></path></svg>',
  chevronRight: '<svg fill="#000000" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M 10,6 9.49,6.51 14.97,12 9.49,17.49 10,18 16,12 Z"></path></svg>'
};

theme.utils = {
  /**
   * Constructs an object of key / value pairs out of the parameters of the query string
   *
   * @return {Object}
   */
   getQueryParams: function() {
    var queryString = location.search && location.search.substr(1) ||Â '';
    var queryParams = {};

    queryString
      .split('&')
      .filter(function (element) {
        return element.length;
      })
      .forEach(function (paramValue) {
        var splitted = paramValue.split('=');

        if (splitted.length > 1) {
          queryParams[splitted[0]] = splitted[1];
        } else {
          queryParams[splitted[0]] = true;
        }
      });

    return queryParams;
  },

  /**
   * Constructs a version of the current URL with the passed in key value pair as part of the query string
   *
   * @param {String} key
   * @param {String} value
   * @param {String} uri - optional, defaults to window.location.href
   * @return {String}
   */
  getUrlWithUpdatedQueryStringParameter: function(key, value, uri) {
    var uri = uri != undefined ? uri : window.location.href;
    
    // remove the hash part before operating on the uri    
    var i = uri.indexOf('#');
    var hash = i === -1 ? ''  : uri.substr(i);
          uri = i === -1 ? uri : uri.substr(0, i);

    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        uri = uri.replace(re, '$1' + key + "=" + value + '$2');
    } else {
        uri = uri + separator + key + "=" + value;
    }
    return uri + hash;  // finally append the hash as well
  },

  /**
   * Constructs a version of the current URL with the passed in parameter key and associated value removed
   *
   * @param {String} key
   * @return {String}
   */
  getUrlWithRemovedQueryStringParameter: function(parameterKeyToRemove, uri) {
    var uri = uri != undefined ? uri : window.location.href,
        rtn = uri.split("?")[0],
        param,
        params_arr = [],
        queryString = (uri.indexOf("?") !== -1) ? uri.split("?")[1] : "";

    if (queryString !== "") {
        params_arr = queryString.split("&");
        for (var i = params_arr.length - 1; i >= 0; i -= 1) {
            param = params_arr[i].split("=")[0];
            if (param === parameterKeyToRemove) {
                params_arr.splice(i, 1);
            }
        }
          if (params_arr.length > 0) { 
          rtn = rtn + "?" + params_arr.join("&");
        }
    }

    return rtn;
  },

  pad: function(n, width, z) {
    z = z || '0';
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
  }
}

theme.TagFilterController = (function() {
  /**
   * TagFilterController constructor.
   * - Manages the tag filters applied to the collection page.
   * - All modifications to / queries for filters should go through this guy
   *
   */
   function TagFilterController() {

    this.name = 'tagFilterController';
    this.tagFilters = [];

    /**
     * Constructs an object of tag filter data to be consumed by other functions inside this controller
     *
     * @return {Object} obj
     * @return {Array}  obj.types
     * @return {Array}  obj.activeTypes
     * @return {Array}  obj.values
     * @return {Array}  obj.activeValues
     * @return {Object} obj.filtersForType
     */
    this._getTagFilterData = function() {
      var data = {
        types: [],
        activeTypes: [],
        actives: [],
        values: [],
        activeValues: [],
        filtersForType: {}
      };

      for (var i = this.tagFilters.length - 1; i >= 0; i--) {
        var tf   = this.tagFilters[i];
        var val  = tf.value;
        var type = tf.type;
        
        // Update data.types
        if(data.types.indexOf(type) == -1) {
          data.types.push(type);
        }
        
        // Update data.values
        if(data.values.indexOf(val) == -1) {
          data.values.push(val);
        }
        
        // Update data.filtersForType
        if(!data.filtersForType.hasOwnProperty(type)) {
          data.filtersForType[type] = [];
        }

        data.filtersForType[type].push(tf);

        // Update data.actives / data.activeTypes / data.activeValues
        if(tf.active) {
          data.actives.push(tf);
          if(data.activeTypes.indexOf(type) == -1) {
            data.activeTypes.push(type);
          }
          if(data.activeValues.indexOf(val) == -1) {
            data.activeValues.push(val);
          }
        }

      }

      return data;
    },

    /**
     * Register an instance of a TagFilter
     *
     * @param {TagFilter} tagFilter
     */
    this.registerTagFilter = function(tagFilter) {    
      this.tagFilters.push(tagFilter);
    };

    this.activateTagFilterByValue = function(val) {
      // console.log('['+this.name+'] ActivateTagFilterByValue - ' + val);
      var tf = this.getTagFilterByValue(val);

      if(tf) {
        tf.activate();
      }
    };

    this.deactivateTagFilterByValue = function(val) {
      // console.log('['+this.name+'] DeactivateTagFilterByValue - ' + val);
      var tf = this.getTagFilterByValue(val);

      if(tf) {
        tf.deactivate();
      }
    };

    this.toggleFilterByValue = function(val){
      var tf = this.getTagFilterByValue(val);
      if(tf) {
        tf.active ? tf.deactivate() : tf.activate();
      }
    };

    this.deactivateAllFilters = function() {
      $.each(this.getActiveTagFilters(), function(i, tf){
        tf.deactivate();
      });
    }

    this.getTagFilterTypes = function() {
      return this._getTagFilterData().types;
    };

    this.getActiveTagFilterTypes = function() {
      return this._getTagFilterData().activeTypes;
    };

    this.getActiveTagFilterValues = function() {
      return this._getTagFilterData().activeValues;
    };

    this.getTagFiltersForType = function(type) {
      var filterData = this._getTagFilterData();

      return filterData.filtersForType.hasOwnProperty(type) ? filterData.filtersForType[type] : [];
    };

    this.getActiveTagFilters = function() {
     return this._getTagFilterData().actives;
    };

    this.getActiveTagFiltersForType = function(type) {
      var tfs = this.getTagFiltersForType(type);

      return tfs.filter(function(f) { return f.active; });
    };

    this.getTagFilterByValue = function(val) {
      for (var i = this.tagFilters.length - 1; i >= 0; i--) {
        var tf = this.tagFilters[i];
        if(tf.value == val) {
          return tf;
        }
      }
    };

    this.getTagFilters = function() {
      return this.tagFilters;
    };
  };

  return TagFilterController;
}());

theme.TagFilter = (function() {
  /**
   * TagFilter constructor.
   *
   * @param {String} type - Filter type (ex. "color", "size")
   * @param {String} value - Filter Value (ex. "color-blue", "size-small")
   * @param {String} title - Display title (ex. "Blue", "Extra Large")
   * @param {Bool} active - You can specify that the filter is active when you construct it
   */
   function TagFilter(type, value, title, active) {
    if(!type || !value) {
      return;
    }

    this.type   = type;
    this.value  = value;
    this.title  = title;
    this.active = active || false;

    return this;
  };

  TagFilter.prototype = {
    activate: function() {
      this.active = true;
      return this;
    },

    deactivate: function() {
      this.active = false;
      return this;
    }
  };

  return TagFilter;
}());

theme.CountdownClock = (function() {

  function CountdownClock(el) {
    this.$el = $(el)
    this.$days = $('[data-days]', this.$el)
    this.$hours = $('[data-hours]', this.$el)
    this.$minutes = $('[data-minutes]', this.$el)
    this.$seconds = $('[data-seconds]', this.$el)

    this.endTime = luxon.DateTime.fromISO(this.$el.data('end-time'), { zone: 'America/Los_Angeles' })
    this.expandedStyle = !!this.$el.data('expanded-style')

    this.tick();
    this.interval = setInterval(this.tick.bind(this), 1e3);
  }

  CountdownClock.prototype = {
    destroy() {
      clearInterval(this.interval)
    },
    tick: function() {
      var nowTime = luxon.DateTime.now()
      
  
      if (nowTime >= this.endTime) {
        clearInterval(this.interval)
      }

      if (this.expandedStyle) {
        var diff = this.endTime.diff(nowTime, ['days', 'seconds', 'minutes', 'hours', 'milliseconds'])
  
        if (nowTime >= this.endTime) {
          diff = {
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0
          }
        }     

        this.$days.text(theme.utils.pad(diff.days, 3, '0'))
        this.$hours.text(theme.utils.pad(diff.hours, 2, '0'))
        this.$minutes.text(theme.utils.pad(diff.minutes, 2, '0'))
        this.$seconds.text(theme.utils.pad(diff.seconds, 2, '0'))
      }
      else {
        var diff = this.endTime.diff(nowTime, ['seconds', 'minutes', 'hours', 'milliseconds'])

        if (nowTime >= this.endTime) {
          diff = {
            hours: 0,
            minutes: 0,
            seconds: 0
          }
        }

        this.$el.text([
          diff.hours,
          diff.minutes,
          diff.seconds
        ].map(function(num) {
          return theme.utils.pad(num, 2, '0');
        }).join(':'))
      }
    }    
  }

  return CountdownClock;
}());

theme.Sections = new function(){
  var _ = this;
  
  var sections = [];
  var instances = [];
  
  _.init = function(){
    $(document).on('shopify:section:load', function(e){
      // load a new section
      var target = _._themeSectionTargetFromShopifySectionTarget(e.target);
      if(target) {
        _.sectionLoad(target);
      }
    }).on('shopify:section:unload', function(e){
      // unload existing section
      var target = _._themeSectionTargetFromShopifySectionTarget(e.target);
      if(target) {
        _.sectionUnload(target);
      }
    });
  }
  
  // register a type of section
  _.register = function(type, section){
    sections.push({ type: type, section: section });
    $('[data-section-type="'+type+'"]').each(function(){
      _.sectionLoad(this);
    });
  }
  
  // load in a section
  _.sectionLoad = function(target){
    var target = target;
    var section = _._sectionForTarget(target);
    if(section !== false) {
      instances.push({
        target: target,
        section: section
      });
      section.onSectionLoad(target);
      $(target).on('shopify:block:select', function(e){
        _._callWith(section, 'onBlockSelect', e.target);
      }).on('shopify:block:deselect', function(e){
        _._callWith(section, 'onBlockDeselect', e.target);
      });
    }
  }
  
  // unload a section
  _.sectionUnload = function(target){
    var instanceIndex = -1;
    for(var i=0; i<instances.length; i++) {
      if(instances[i].target == target) {
        instanceIndex = i;
      }
    }
    if(instanceIndex > -1) {
      $(target).off('shopify:block:select shopify:block:deselect');
      _._callWith(instances[instanceIndex].section, 'onSectionUnload', target);
      instances.splice(instanceIndex);
    }
  }
  
  // helpers
  _._callWith = function(object, method, param) {
    if(typeof object[method] === 'function') {
      object[method](param);
    }
  }
  
  _._themeSectionTargetFromShopifySectionTarget = function(target){
    var $target = $('[data-section-type]:first', target);
    if($target.length > 0) {
      return $target[0];
    } else {
      return false;
    }
  }
  
  _._sectionForTarget = function(target) {
    var type = $(target).attr('data-section-type');
    for(var i=0; i<sections.length; i++) {
      if(sections[i].type == type) {
        return sections[i].section;
      }
    }
    return false;
  }
}

theme.SlideshowSection = new function(){
  this.onSectionLoad = function(target){
    $('.slideshow', target).each(function(){
      var $slider = $(this);
      $('.slideshow .line-1, .slideshow .line-2, .slideshow .line-3', this).addClass('trans-out');
      $slider.slick({
        fade: true,
        autoplaySpeed: 7000,
        adaptiveHeight: $slider.hasClass('smoothheight'),
        arrows: true,
        dots: false,
        prevArrow: '<button type="button" class="slick-prev">'+theme.icons.chevronLeft+'</button>',
        nextArrow: '<button type="button" class="slick-next">'+theme.icons.chevronRight+'</button>',
        slidesToShow: 1,
        variableWidth: false,
        responsive: [
          {
            breakpoint: 768,
            settings: {
              fade: false,
              arrows: false,
              dots: true
            }
          }
        ]
      }).on('beforeChange', function(event, slick, currentSlide, nextSlide){
        if(currentSlide != nextSlide) {
          $(slick.$slides[nextSlide]).find('.line-1, .line-2, .line-3').addClass('trans-out');
        }
      }).on('afterChange', function(event, slick, currentSlide, misc){
        var $thisSlide = $(slick.$slides[currentSlide]);
        $thisSlide.siblings().find('.line-1, .line-2, .line-3').addClass('trans-out');
        setTimeout(function(){ $thisSlide.find('.line-1').removeClass('trans-out') }, 0);
        setTimeout(function(){ $thisSlide.find('.line-2').removeClass('trans-out') }, 400);
        setTimeout(function(){ $thisSlide.find('.line-3').removeClass('trans-out') }, 1000);
      });
      $slider.imagesLoaded(function(){
        $slider[0].slick.refresh(); // must call before slickPlay
        // start autoplay after images have loaded
        $slider.filter(':not(.shopify-block-paused)').slick('slickPlay');
        setTimeout(function(){ $('.slideshow .line-1').removeClass('trans-out') }, 500);
        setTimeout(function(){ $('.slideshow .line-2').removeClass('trans-out') }, 900);
        setTimeout(function(){ $('.slideshow .line-3').removeClass('trans-out') }, 1500);
      });
    });
  }
  
  this.onSectionUnload = function(target){
    $('.slick-slider', target).slick('unslick');
  }
  
  this.onBlockSelect = function(target){
    $(target).closest('.slick-slider')
      .addClass('shopify-block-paused')
      .slick('slickGoTo', $(target).data('slick-index'))
      .slick('slickPause');
  }
  
  this.onBlockDeselect = function(target){
    $(target).closest('.slick-slider')
      .removeClass('shopify-block-paused')
      .slick('slickPlay');
  }
}

theme.InstagramSection = new function(){
  this.onSectionLoad = function(target){
    $('.willstagram:not(.willstagram-placeholder)', target).each(function(){
      var user_id = $(this).data('user_id');
      var tag = $(this).data('tag');
      var access_token = $(this).data('access_token');
      var count = $(this).data('count') || 10;
      var $willstagram = $(this);
      var url = '';
      if(typeof user_id != 'undefined') {
        url = 'https://api.instagram.com/v1/users/' + user_id + '/media/recent?count='+count;
      } else if(typeof tag != 'undefined') {
        url = 'https://api.instagram.com/v1/tags/' + tag + '/media/recent?count='+count;
      }
      $.ajax({
        type: "GET",
        dataType: "jsonp",
        cache: false,
        url: url
        + (typeof access_token == 'undefined'? '' : ('&access_token='+access_token)),
        success: function(res) {
          if(typeof res.data != 'undefined') {
            var $itemContainer = $('<ul class="items">').appendTo($willstagram);
            var limit = Math.min(20, res.data.length);
            for(var i = 0; i < limit; i++) {
              var photo_url = res.data[i].images.low_resolution.url.replace('http:', '');
              var link = res.data[i].link;
              var caption = res.data[i].caption != null ? res.data[i].caption.text : '';
              $itemContainer.append($('<li />').append('<div class="item"><a target="_blank" href="'+link+'"><img src="'+photo_url+'" /></a><div class="desc">'+caption+'</div></div>'));
            }
          } else if(typeof res.meta !== 'undefined' && typeof res.meta.error_message !== 'undefined') {
            $willstagram.append('<div class="willstagram__error">'+res.meta.error_message+'</div>');
          }
      	}
      });
      if(typeof $(this).data('account') != 'undefined') {
        var splSel = $(this).data('account').split('|');
        var $account = $(this).closest(splSel[0]).find(splSel[1]);
        $.ajax({
          type: "GET",
          dataType: "jsonp",
          url: 'https://api.instagram.com/v1/users/self/?access_token='+access_token,
          success: function(res) {
            if(typeof res.data != 'undefined') {
              $('<a>').html('@'+res.data.username).attr({
                href: 'https://www.instagram.com/'+res.data.username,
                target: '_blank'
              }).appendTo($account);
            }
          }
        });
      }
    });
  }
}

theme.ProductTemplateSection = new function(){
  this.onSectionLoad = function(target){
    $('.product-gallery').trigger('initzoom');
    
    $('.product-form', target).trigger('initproductform');
    
    /// Grid item heights
    $(window).trigger('normheights');
  }
}

theme.CollectionListingSection = new function(){
  this.onSectionLoad = function(target){
    /// Grid item heights
    $(window).trigger('normheights');
  }
}

theme.FeaturedCollectionSection = new function(){
  this.onSectionLoad = function(target){
    /// Grid item heights
    $(window).trigger('normheights');
  }
}

theme.SearchTemplateSection = new function(){
  this.onSectionLoad = function(target){
    /// Grid item heights
    $(window).trigger('normheights');
  }
}

// Loading third party scripts
theme.scriptsLoaded = [];
theme.loadScriptOnce = function(src, callback) {
  if(theme.scriptsLoaded.indexOf(src) < 0) {
    theme.scriptsLoaded.push(src);
    var tag = document.createElement('script');
    tag.src = src;
    
    if(typeof callback == 'function') {
      if (tag.readyState) { // IE, incl. IE9
        tag.onreadystatechange = function() {
          if (tag.readyState == "loaded" || tag.readyState == "complete") {
            tag.onreadystatechange = null;
            callback();
          }
        };
      } else {
        tag.onload = function() { // Other browsers
          callback();
        };
      }
    }
    
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    return true;
  } else {
    if(typeof callback == 'function') {
      callback();
    }
    return false;
  }
}

// Manage videos
theme.VideoManager = new function(){
  var _ = this;
  
  // Youtube
  _.youtubeVars = {
    incrementor: 0,
    apiReady: false,
    videoData: {},
    toProcessSelector: '.video-container[data-video-type="youtube"]:not(.video--init)'
  };
  
  _.youtubeApiReady = function() {
    _.youtubeVars.apiReady = true;
    _._loadYoutubeVideos();
  }
  
  _._loadYoutubeVideos = function(container) {
    if($(_.youtubeVars.toProcessSelector, container).length) {
      if(_.youtubeVars.apiReady) {
        // play those videos
        $(_.youtubeVars.toProcessSelector, container).addClass('video--init').each(function(){
          _.youtubeVars.incrementor++;
          var containerId = 'theme-yt-video-'+_.youtubeVars.incrementor;
          var videoElement = $('<div>').attr('id', containerId).appendTo(this);
          var player = new YT.Player(containerId, {
            height: '390',
            width: '640',
            videoId: $(this).data('video-id'),
            playerVars: {
              iv_load_policy: 3,
              modestbranding: 1,
              autoplay: !!$(this).data('video-autoplay') ? 1 : 0,
              rel: 0
            },
            events: {
              onReady: _._onYoutubePlayerReady,
              onStateChange: _._onYoutubePlayerStateChange
            }
          });
          _.youtubeVars.videoData[player.h.id] = {
            id: containerId,
            container: this,
            videoElement: videoElement,
            player: player
          };
        });
      } else {
        // load api
        theme.loadScriptOnce('https://www.youtube.com/iframe_api');
      }
    }
  }
  
  _._onYoutubePlayerReady = function(event) {
    event.target.setPlaybackQuality('hd1080');
  }
       
  _._onYoutubePlayerStateChange = function(event) {
  }
    
  _._getYoutubeVideoData = function(event) {
    return _.youtubeVars.videoData[event.target.h.id];
  }
  
  _._unloadYoutubeVideos = function(container) {
    for(var dataKey in _.youtubeVars.videoData) {
      var data = _.youtubeVars.videoData[dataKey];
      if($(container).find(data.container).length) {
        data.player.destroy();
        delete _.youtubeVars.videoData[dataKey];
        return;
      }
    }
  }
  
  // Vimeo
  _.vimeoVars = {
    incrementor: 0,
    apiReady: false,
    videoData: {},
    toProcessSelector: '.video-container[data-video-type="vimeo"]:not(.video--init)'
  };
  
  _.vimeoApiReady = function() {
    _.vimeoVars.apiReady = true;
    _._loadVimeoVideos();
  }
  
  _._loadVimeoVideos = function(container) {
    if($(_.vimeoVars.toProcessSelector, container).length) {
      if(_.vimeoVars.apiReady) {
        // play those videos
        $(_.vimeoVars.toProcessSelector, container).addClass('video--init').each(function(){
          _.vimeoVars.incrementor++;
          var $this = $(this);
          var containerId = 'theme-vi-video-'+_.vimeoVars.incrementor;
          var videoElement = $('<div>').attr('id', containerId).appendTo(this);
          var autoplay = !!$(this).data('video-autoplay');
          var player = new Vimeo.Player(containerId, {
            id: $(this).data('video-id'),
            width: 640,
            loop: false,
            autoplay: autoplay
          });
          player.ready().then(function(){
            if(player.element && player.element.width && player.element.height) {
              var ratio = parseInt(player.element.height) / parseInt(player.element.width);
              $this.css('padding-bottom', (ratio*100) + '%');
            }
          });
          _.vimeoVars.videoData[containerId] = {
            id: containerId,
            container: this,
            videoElement: videoElement,
            player: player,
            autoPlay: autoplay
          };
        });
      } else {
        // load api
        theme.loadScriptOnce('https://player.vimeo.com/api/player.js', function(){
          _.vimeoVars.apiReady = true;
          _._loadVimeoVideos();
        });
      }
    }
  }
  
  _._unloadVimeoVideos = function(container) {
    for(var dataKey in _.vimeoVars.videoData) {
      var data = _.vimeoVars.videoData[dataKey];
      if($(container).find(data.container).length) {
        data.player.unload();
        delete _.vimeoVars.videoData[dataKey];
        return;
      }
    }
  }
  
  // Compatibility with Sections
  this.onSectionLoad = function(container){
    _._loadYoutubeVideos(container);
    _._loadVimeoVideos(container);
  }
  
  this.onSectionUnload = function(container){
    _._unloadYoutubeVideos(container);
    _._unloadVimeoVideos(container);
  }
}

// Youtube API callback
function onYouTubeIframeAPIReady() {
  theme.VideoManager.youtubeApiReady();
}

theme.TiledImagesSection = new function(){
  this.onSectionLoad = function(target){
    $('.tile-group', target).each(function(){
      var $cont = $(this);
      $cont.find('svg').closest('.tile').addClass('loaded');
      if($cont.find('img').length) {
        //Wait for all images to load, then render them and finally reveal them
        $cont.find('img').imagesLoaded(function(e){
          $(e.elements).closest('.tile').addClass('loaded');
          $cont.trigger('render');
        });
      } else {
        // probably all placeholders
        $cont.trigger('render');
      }
    });
  }
  this.onSectionUnload = function(target){
  }
}

theme.HeaderSection = new function(){
  this.onSectionLoad = function(target){
    /// Create mobile navigation
    $('body').append($('#mobile-navigation-template', target).html());
    
    /// Ensuring nav responds nicely to taps/clicks/hovers
    $('.main-nav li.dropdown > a, .main-nav li.has-dropdown > a', target).attr('aria-haspopup', 'true'); //ie
    $('.main-nav > ul > li.dropdown', target).doubleTapToGo(); //other touchscreen taps

    // always follow links
    $('.main-nav', target).on('click', 'li.drop-uber .sub-nav-item:not(.has-dropdown) a', function(){
      window.location = $(this).attr('href');

    }).on('click', '.sub-nav-item.has-dropdown > a', function(){
      // Sub sub nav
      $(this).parent().toggleClass('sub-nav-item--expanded', !$(this).siblings().is(':visible'));
      $(this).siblings().slideToggle(250);
      return false;

    }).filter('[data-col-limit]').each(function(){
      // Ensure no columns go over the per-column quota
      var perCol = $(this).data('col-limit');
      if(perCol > 0) {
        $('.nav-item.dropdown.drop-norm > .sub-nav', this).each(function(){
          var $items = $(this).find('.sub-nav-list > .sub-nav-item');
          var cols = Math.ceil($items.length / perCol);
          for(var i=1; i<cols; i++) {
            var $list = $('<ul class="sub-nav-list"/>').append($items.slice(perCol*i)).appendTo(this);
          }
          $(this).addClass('cols-'+cols);
        });
      }
    });

    /// Nav images
    var ios = navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad)/); // have to skip on iOS; it detects dom-change on hover and prevents click
    if (!(ios)) {
      $('.main-nav', target).on('mouseenter loadimg', '.sub-nav.has-img .sub-nav-item-link', function(){
        var $imgCont = $(this).closest('.sub-nav').find('.rep-img').empty();
        if(typeof $(this).data('img') != 'undefined') { $imgCont.append('<img src="'+$(this).data('img')+'+"/>'); }
      });
    } else {
      $('.main-nav .sub-nav.has-img', target).removeClass('has-img').find('.rep-img').remove();
    }

    $(window).trigger('handledockednav');
    $(window).trigger('ensuredropdownposition');
    
    /// Style any dropdowns
    $('select:not([name=id])', target).selectReplace();
    
    /// Resize nav when it doesn't fit on one line...
    if($('.main-nav > ul > li:first', target).length) {
      $(window).on('debouncedresize.resizeNavFont load.resizeNavFont resizenav.resizeNavFont', function(){
        //create invisible clone of nav list with no css tweaks
        var $clone = $('.main-nav > ul').clone().addClass('clone').css({ position: 'absolute', visibility: 'hidden', pointerEvents: 'none', left: 0, width: '100%' }).appendTo('.main-nav');
        var $samelineCheckA = $clone.children().first();
        var $samelineCheckB = $clone.children().last();
        var $cloneLinks = $clone.find('.nav-item-link').removeAttr('style');
        var includesLogo = $clone.children('.logo-item').length > 0;
        var sanity = 500;
        var padR = Math.floor(parseInt($cloneLinks.first().css('padding-right')));
        var fontSize = Math.floor(parseInt($cloneLinks.first().css('font-size')));
        var setStyles = false;
        var onSameLine;
        if(includesLogo) {
          onSameLine = function(){ return (Math.floor($samelineCheckA.offset().top) + $samelineCheckA.height()) != (Math.floor($samelineCheckB.offset().top) + $samelineCheckB.height()); };
        } else {
          onSameLine = function(){ return $samelineCheckA.offset().top != $samelineCheckB.offset().top; };
        }
        while(onSameLine() && sanity-- > 0) {
          padR = Math.max(0, padR - 0.5);
          fontSize = Math.max(12, fontSize - 0.5);
          $cloneLinks.css({ paddingRight: padR, fontSize: fontSize });
          setStyles = true;
        }
        if(!setStyles) {
          padR = '';
          fontSize = '';
        }
        //Shunt data back
        $('.main-nav .nav-item-link').css({ paddingRight: padR, fontSize: fontSize });
        $clone.remove();
      }).trigger('resizenav');
    }

    if ($('[data-countdown]', target).length) {
      var $countdown = $('[data-countdown]', target)
      
      this.countdownClock = new theme.CountdownClock($countdown)
    }
  }
  
  this.onSectionUnload = function(target){
    $('.main-nav', this).off('click mouseenter loadimg');
    $('body #mobile-nav').remove();
    $(window).off('.resizeNavFont');

    if (this.countdownClock) {
      this.countdownClock.destroy()
    }
  }
}

theme.BlogTemplateSection = new function(){
  this.onSectionLoad = function(target){
    /// Style any dropdowns
    $('select:not([name=id])', target).selectReplace();
    
    // Masonry
    $('.use-masonry', target).each(function(){
      var $toMasonry = $(this);
      theme.loadScriptOnce({{ 'masonry.pkgd.min.js' | asset_url | json }}, function(){
        $toMasonry.addClass('masonry').masonry({
          itemSelector: '.article',
          visibleStyle:   { opacity: 1, transform: 'translate3d(0,0,0)' },
          hiddenStyle:    { opacity: 0, transform: 'translate3d(0,20px,0)' }
        });
        // hack: needs a second run, may as well do after load
        setTimeout(function(){
          $(window).on('load.blogTemplateMasonry', function(){
            $toMasonry.masonry();
          });
        }, 10);
      });
    });
    
    // Infinite scroll
    $('.articles.use-infinite-scroll', target).each(function(){
      var $cont = $(this);
      theme.loadScriptOnce({{ 'jquery.infinitescroll.min.js' | asset_url | json }}, function(){
        $cont.infinitescroll({
          navSelector  : ".pagination",
          nextSelector : ".pagination .next",
          itemSelector : ".articles .article",
          loading: {
            img         : {{ 'loading.gif' | asset_url | json }},
            msgText     : {{ 'blogs.infinite_scroll.loading' | t | json }},
            finishedMsg : {{ 'blogs.infinite_scroll.no_more' | t | json }}
          },
          pathParse:function(path,nextPage){
            return path.match(/^(.*page=)[0-9]*(&.*)?$/).splice(1);
          }
        }, function(newElements){
          $cont.find('#infscr-loading').remove(); // for nth-child
          if($cont.hasClass('masonry')) {
            $(newElements).hide().imagesLoaded(function(){
              $(newElements).show();
              $cont.masonry('appended', $(newElements), true);
            });
          }
        });
      });
    });

    /// Check that tags fit in one line
    if($('.page-title.opposing-items .tags', target).length > 0) {
      $(window).on('debouncedresize.checktagswidth load.checktagswidth checktagswidth.checktagswidth', function(){
        var $cont = $('.page-title.opposing-items');
        var $title = $cont.children('.left');
        var $tags = $cont.children('.tags');
        $cont.toggleClass('collapse-tags', $tags.outerWidth(true) > $cont.width() - $title.outerWidth(true));
        if($cont.hasClass('collapse-tags')) {
          if($cont.find('.section-count').length == 0) {
            $tags.before([
              '<a href="#" class="btn section-count">',
              {{ 'blogs.general.show_tags' | t | json }},
              ' (', ($tags.children().length - 1) , ')</a>'].join(''));
          }
        } else {
          $cont.find('.section-count').remove();
        }
      }).trigger('checktagswidth');

      $(document).on('click.checktagswidth', '.page-title.opposing-items.collapse-tags .btn.section-count', function(e){
        e.preventDefault();
        $(this).closest('.opposing-items').toggleClass('reveal-tags');
      });
    }
  }
  
  this.onSectionUnload = function(target){
    $(window).off('.checktagswidth .blogTemplateMasonry');
    $(document).off('.checktagswidth');
  }
};

theme.CollectionTemplateSection = new function(){
  var selectors = {
    productList: '.product-list',
    productCard: '.product-block',
    filterTagsRow: '.collection-filter-tags__row',
    filterTags: '[data-filter-type][data-filter-tags]',
    filterControls: '[data-filter-controls]',
    filterControlsToggle: '[data-filter-controls-toggle]',
    collectionFilterEmpty: '[data-collection-filter-empty]',
    clearFilters: '[data-clear-filters]'
  };

  var classes = {
    filterActive: 'is-active',
    filterControlsOpen: 'is-open',
    filterConTrolsToggleHasActiveFilters: 'has-active-filters',
    clearFiltersVisible: 'is-visible'
  };

  this.onSectionLoad = function(target){
    var self = this;
    
    this.$container = $(target);

    // Infinite-scroll
    $('.product-list.use-infinite-scroll', target).each(function(){
      var $cont = $(this);
      theme.loadScriptOnce({{ 'jquery.infinitescroll.min.js' | asset_url | json }}, function(){
        $cont.infinitescroll({
          navSelector  : ".pagination",
          nextSelector : ".pagination .next",
          itemSelector : ".product-list .product-block",
          loading: {
            img         : {{ 'loading.gif' | asset_url | json }},
            msgText     : {{ 'collections.infinite_scroll.loading' | t | json }},
            finishedMsg : {{ 'collections.infinite_scroll.no_more' | t | json }}
          },
          pathParse:function(path,nextPage){
            return path.match(/^(.*page=)[0-9]*(&.*)?$/).splice(1);
          }
        }, function(newElements){
          $cont.find('#infscr-loading').remove(); // for nth-child
          $(newElements).imagesLoaded(function(){
            $(window).trigger('normheights');
          });
        });
      });
    });
    
    // Sort-by
    if($('.sort-by', target).length > 0) {
      queryParams = {};
      if (location.search.length) {
        for (var aKeyValue, i = 0, aCouples = location.search.substr(1).split('&'); i < aCouples.length; i++) {
          aKeyValue = aCouples[i].split('=');
          if (aKeyValue.length > 1) {
            queryParams[decodeURIComponent(aKeyValue[0])] = decodeURIComponent(aKeyValue[1]);
          }
        }
      }
      $('.sort-by', target).each(function(){
        $(this).val($(this).data('default-value')).trigger('change');
      }).on('change', function() {
        queryParams.sort_by = $(this).val();
        location.search = $.param(queryParams).replace(/\+/g, '%20');
      });
    }
    
    /// Style any dropdowns
    $('select:not([name=id])', target).selectReplace();
    
    /// Grid item heights
    $(window).trigger('normheights');

    /// Filtering
    this.queryStringFilterParamKey = 'filters';
    this.$productList = $(selectors.productList, target);
    this.$productCards = $(selectors.productCard, target);
    this.$filterTags = $(selectors.filterTags, target);
    this.$filterTagsRows = $(selectors.filterTagsRow, target);
    this.$filterControls = $(selectors.filterControls, target);
    this.$filterControlsToggle = $(selectors.filterControlsToggle, target);
    this.$clearFilters = $(selectors.clearFilters, target);
    this.$collectionFilterEmpty = $(selectors.collectionFilterEmpty, target);

    this.tagFilterController = new theme.TagFilterController();

    function tagSortNumberReducer(prev, current) {
      current = $.trim(current);

      var currentVal = parseFloat(current);
      var currentSplit = current.split('/')

      if (currentSplit.length === 2) {
        currentVal = currentSplit[0] / currentSplit[1]
      }

      return prev + currentVal
    }

    // Sort the tag filters since it's much easier to do in JS than in liquid
    this.$filterTagsRows.each(function() {
      var $row = $(this);
      var $filterTags = $row.find(selectors.filterTags);

      $filterTags.detach();

      $filterTags.sort(function(a, b) {
        var aVal = a.innerText.split(' ') // '7 1/2' -> ['7', '1/2']
        var bVal = b.innerText.split(' ') // '7 1/2' -> ['7', '1/2']

        // Reduce tag value to a number so we can order numeric sizes correctly
        var an = aVal.reduce(tagSortNumberReducer, 0)
        var bn = bVal.reduce(tagSortNumberReducer, 0)

        return an > bn ? 1 : (an < bn ? -1 : 0);
      });

      $row.append($filterTags);
    });    

    // Register all the tag filters
    this.$filterTags.each(function() {
      var $ft   = $(this);
      var type  = $ft.data('filter-type');
      var title = $ft.attr('title') && $ft.attr('title').length ? $ft.attr('title') : $ft.text();
      var tags  = $ft.data('filter-tags').split(" "); // Handle single filterElements that map to multiple tags (space separated)

      $.each(tags, function(i, value) {
        self.tagFilterController.registerTagFilter(new theme.TagFilter(type, value, title));
      });
    });

    // When we load the page, check for filter tag parameters in the URL
    var queryParams = theme.utils.getQueryParams();
    var queryParamFilters = [];

    if(queryParams.hasOwnProperty(this.queryStringFilterParamKey) && queryParams[ this.queryStringFilterParamKey ].length) {
      
      queryParamFilters = decodeURIComponent(queryParams[this.queryStringFilterParamKey]).split('+');

      $.each(queryParamFilters, function(i, param) {
        self.tagFilterController.activateTagFilterByValue(param);
      });
    }    

    // evt handlers
    this.$filterTags.on('click', this.onFilterTagsClick.bind(this));
    this.$clearFilters.on('click', this.onClearFiltersClick.bind(this));
    this.$filterControlsToggle.on('click', this.onFilterControlsToggleClick.bind(this));    

    if(this.tagFilterController.getActiveTagFilters().length) {
      this.$productList.hide();
      this.openFilters();
      this.applyTagFilters();
    }    
  }

  /**
   * Returns a jQuery set of product card elements that satisfy the currently applied filtering
   * If there are no filters, we return the entire set of cards
   *
   * @return {jQuery}
   */
  this.getProductCardsThatPassAppliedFilters = function() {
    var self = this;
    // Need to create *new* copies of the product card set
    var $productCardSetFilterOut = $(selectors.productCard, this.$container); // Start with all the cards, and filter out the ones that pass, leaving the ones that need to be hidden
    var activeFilterTypes        = this.tagFilterController.getActiveTagFilterTypes();

    // We don't have active filters - show everything, nothing needs to be hidden!
    if(!activeFilterTypes.length) {
      return this.$productCards;
    }

    // We DO have active filters - Loop through each product card
    this.$productCards.each(function(i){
      var passesActiveFilters = true; // If this is still "true" at the end of all this logic, then the product passes the applied filters and should be displayed
      var $productCard       = $(this);
      var dataTags           = $productCard.data('tags') ? $productCard.data('tags').split(' ') : [];
      
      // If there aren't any tags, return early
      if (!dataTags || dataTags.length === 0) {
        passesActiveFilters = false;
        return;
      }

      // Loop through each active filter
      for (var i = activeFilterTypes.length - 1; i >= 0; i--) {
        var activeFilterTypeMatch        = false;
        var activeTagFiltersForType      = self.tagFilterController.getActiveTagFiltersForType( activeFilterTypes[i] ); // [TagFilter, TagFilter]
        var activeTagFilterValuesForType = activeTagFiltersForType.map(function(tf){ return tf.value; }); // ["color-blue", "color-red"]

        for (var k = activeTagFilterValuesForType.length - 1; k >= 0; k--) {
          var activeTagFilterVal = activeTagFilterValuesForType[k]; // "color-blue"

          // as soon as we find a match for this filter type (doesn't matter which value), return it as a match
          // this is how we satisfy the requirement to match ANY filter for a particular filter type (match "red" OR "blue")
          if(dataTags.indexOf(activeTagFilterVal) != -1) {
            activeFilterTypeMatch = true;
            break;
          }
        }
        
        // Not a match :(
        if(activeFilterTypeMatch == false) {
          passesActiveFilters = false;
          break;
        }
      }

      if(passesActiveFilters) {
        $productCardSetFilterOut = $productCardSetFilterOut.not($productCard); // remove it from the matched set
      }
    });

    return this.$productCards.not($productCardSetFilterOut);
  }

  this.onFilterControlsToggleClick = function(e) {
    e.preventDefault();

    if(this.$filterControlsToggle.hasClass(classes.filterControlsOpen)) {
      this.closeFilters();
    }
    else {
      this.openFilters();
    }
  }

  /**
   * Handle filter tags element click event.
   * Toggles the state of the filter that was clicked on and then applies the tag filters to the collection
   *
   * @param {event} evt
   */
  this.onFilterTagsClick = function(e) {
    e.preventDefault();

    var self          = this;
    var $filterTagsEl = $(e.currentTarget);
    var tags          = $filterTagsEl.data('filter-tags').split(" ");

    if(tags.length == 0) return;

    $.each(tags, function(i, t) {
      self.tagFilterController.toggleFilterByValue(t);
    });

    self.applyTagFilters();
  }

  this.onClearFiltersClick = function(e) {
    e.preventDefault();
    this.tagFilterController.deactivateAllFilters();
    this.applyTagFilters();
  }  

  /**
   * Updates the filter UI to reflect the state of active / deactive filters
   *
   */
  this.updateFilterUI = function() {
    var self = this;
    var filters = this.tagFilterController.getTagFilters();
    var activeFilters = this.tagFilterController.getActiveTagFilters()

    $.each(filters, function(i, f) {
      var $filterTag = self.$filterTags.filter(function(){
        var $currentTag = $(this);
        var $found;

        $.each($currentTag.data('filter-tags').split(" "), function(i, val){
          if(val == f.value) {
            $found = $currentTag;
            return false;
          }
        });

        return $found;
      });

      $filterTag.toggleClass(classes.filterActive, f.active)
    });

    this.$clearFilters.toggleClass(classes.clearFiltersVisible, activeFilters.length > 0)
  }

  /**
   * Updates the current URL to reflect the state of the applied filters
   * Appends a query string like ?filter-tags={{ tag1 }}+{{ tag2 }}
   *
   */
  this.updateURL = function() {
    var queryStringFilterParamValues = this.tagFilterController.getActiveTagFilterValues().join('+');
    var updatedUrl;

    if(window.history) {
      if(queryStringFilterParamValues.length) {
        updatedUrl = theme.utils.getUrlWithUpdatedQueryStringParameter(this.queryStringFilterParamKey, queryStringFilterParamValues);
      }
      else {
        updatedUrl = theme.utils.getUrlWithRemovedQueryStringParameter(this.queryStringFilterParamKey);
      }
      
      window.history.replaceState({ path: updatedUrl }, '', updatedUrl);
    }
  }

  this.closeFilters = function() {
    if(!this.$filterControlsToggle.length || !this.$filterControls.length) return;

    this.$filterControlsToggle.removeClass(classes.filterControlsOpen);
    
    this.$filterControls.slideUp(350);
    this.$filterControls.children().first().css('opacity', 1).fadeTo(250, 0)
  }

  this.openFilters = function() {
    if(!this.$filterControlsToggle.length || !this.$filterControls.length) return;

    this.$filterControlsToggle.addClass(classes.filterControlsOpen);

    this.$filterControls.slideDown(200);
    this.$filterControls.children().first().css('opacity', 0).fadeTo(600, 1);    
  }

  this.applyTagFilters = function() {
    var self = this;
    var cb;
    var $productCardSetThatPasses = this.getProductCardsThatPassAppliedFilters();
    var passingProductCardCount   = $productCardSetThatPasses.length;

    // Nothing Matches
    if (passingProductCardCount == 0) {  
      cb = function() {
        self.$collectionFilterEmpty.show();
        self.$productCards.hide();
      };
    }
    // Everything matches
    else if (passingProductCardCount === this.$productCards.length) {
      cb = function() {
        self.$collectionFilterEmpty.hide();
        self.$productCards.show();
      }
    }
    // Partial match
    else {
      cb = function() {
        self.$collectionFilterEmpty.hide();
        self.$productCards.hide();
        $productCardSetThatPasses.show();
      }
    }

    this.$productList.fadeOut(300, function() {
      cb();
      this.$productList.fadeIn(400)
    }.bind(this))

    this.updateFilterUI();
    this.updateURL();

    return this;
  }
  
  this.onSectionUnload = function(target){
    $('.sort-by', target).off('change');
  }
}

theme.FeaturedBlogSection = new function(){
  this.onSectionLoad = function(target){
    /// Aspect-ratio image crop
    $('[data-crop-img]', target).each(function(){
      var viewRatio = $(this).outerWidth() / $(this).outerHeight();
      var $img = $(this).find('img');
      $img.imagesLoaded(function(){
        var imgRatio = $img.width() / $img.height();
        if(imgRatio < viewRatio) {
          $img.css({
            top:  - (viewRatio / (imgRatio * 2) - 0.5) * 100 + '%',
            left: 0,
            width: '100%',
            height: 'auto',
            minWidth: '0',
            minHeight: '0',
            maxWidth: 'none',
            maxHeight: 'none'
          });
        } else {
          $img.css({
            top: 0,
            left: - (imgRatio / (viewRatio * 2) - 0.5) * 100 + '%',
            width: 'auto',
            height: '100%',
            minWidth: '0',
            minHeight: '0',
            maxWidth: 'none',
            maxHeight: 'none'
          });
        }
      });
    });
  }
  
  this.onSectionUnload = function(target){
  }
}

theme.CountdownSection = new function(){
  this.onSectionLoad = function(target) {
    if ($('[data-countdown]', target).length) {
      var $countdown = $('[data-countdown]', target)
      
      this.countdownClock = new theme.CountdownClock($countdown)
    }
  }

  this.onSectionUnload = function() {
    if (this.countdownClock) {
      this.countdownClock.destroy()
    }
  }
}

/// Wide images inside rich text content
// To use: add class 'uncontain' to image, or add alt text ending 'fullwidth'
theme.uncontainImages = function(container) {
  // set up
  $('.reading-column [data-fullwidth]:not(.uncontain)', container).addClass('uncontain');
  // event
  if($('.reading-column .uncontain').length > 0) {
    $(window).on('resize.wideimgs load.wideimgs wideimgs.wideimgs', function(){
      var contW = $('#page-wrap-inner').css('border-color') == 'rgb(255, 0, 1)' ? $(window).width() : $('.container:visible:first').width();
      $('.reading-column .uncontain').each(function(){
        var thisContW = $(this).closest('div:not(.uncontain), p:not(.uncontain)').width();
        $(this).css({
          width: contW,
          marginLeft: - (contW - thisContW) / 2.0,
          maxWidth: 'none'
        });
      });
    }).trigger('wideimgs');
  } else {
    $(window).off('.wideimgs');
  }
}

// Manage option dropdowns
theme.OptionManager = new function(){
  var _ = this;

  _.selectors = {
    container: '.product-container',
    gallery: '.product-gallery',
    priceArea: '.product-price',
    submitButton: 'input[type=submit], button[type=submit]',
    multiOption: '.option-selectors'
  };
  
  _.strings = {
    priceNonExistent: {{ 'products.variant.non_existent' | t | json }},
    priceSoldOut: '[PRICE]',
    buttonDefault: {{ 'products.product.add_to_cart_html' | t | json }},
    buttonNoStock: {{ 'products.variant.out_of_stock' | t | json }},
    buttonNoVariant: {{ 'products.variant.non_existent' | t | json }}
  };
  
  _._getString = function(key, variant){
    var string = _.strings[key];
    if(variant) {
      string = string.replace('[PRICE]', Shopify.formatMoney(variant.price, theme.money_format));
    }
    return string;
  }
  
  _.getProductData = function($form) {
    var data = theme.productData[$form.data('product-id')];
    if(typeof data == 'undefined') {
      console.log('Product data missing (id: '+$form.data('product-id')+')');
    }
    return data;
  }
  
  _.addVariantUrlToHistory = function(variant) {
    if(variant) {
      var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname + '?variant=' + variant.id;
      window.history.replaceState({path: newurl}, '', newurl);
    }
  }
  
  _.updateSku = function(variant, $container){
    $container.find('.sku .sku__value').html( variant ? variant.sku : '' );
    $container.find('.sku').toggleClass('sku--no-sku', !variant || !variant.sku);
  }
  
  _.updateBarcode = function(variant, $container){
    $container.find('.barcode .barcode__value').html( variant ? variant.barcode : '' );
    $container.find('.barcode').toggleClass('barcode--no-barcode', !variant || !variant.barcode);
  }
  
  _.updateBackorder = function(variant, $container){
    var $backorder = $container.find('.backorder');
    if($backorder.length) {
      if (variant && variant.available) {
        if (variant.inventory_management && variant.inventory_quantity <= 0) {
          var productData = _.getProductData($backorder.closest('form'));
          $backorder.find('.selected-variant').html(productData.title + (variant.title.indexOf('Default') >= 0 ? '' : ' - '+variant.title) );
          $backorder.show();
        } else {
          $backorder.hide();
        }
      } else {
        $backorder.hide();
      }
    }
  }
  
  _.updatePrice = function(variant, $container) {
    var $priceArea = $container.find(_.selectors.priceArea);
    $priceArea.removeClass('on-sale');
    
    if(variant && variant.available == true) {
      var $newPriceArea = $('<div>');
      if(variant.compare_at_price > variant.price) {
        $('<span class="was-price">').html(Shopify.formatMoney(variant.compare_at_price, theme.money_format)).appendTo($newPriceArea);
        $newPriceArea.append(' ');
        $priceArea.addClass('on-sale');
      }
      $('<span class="current-price">').html(Shopify.formatMoney(variant.price, theme.money_format)).appendTo($newPriceArea);
      $priceArea.html($newPriceArea.html());
    } else {
      if(variant) {
        $priceArea.html(_._getString('priceSoldOut', variant));
      } else {
        $priceArea.html(_._getString('priceNonExistent', variant));
      }
    }
  }
  
  _._updateButtonText = function($button, string, variant) {
    $button.each(function(){
      var newVal;
      newVal = _._getString('button' + string, variant);
      if(newVal !== false) {
        if($(this).is('input')) {
          $(this).val(newVal);
        } else {
          $(this).html(newVal);
        }
      }
    });
  }
  
  _.updateButtons = function(variant, $container) {
    var $button = $container.find(_.selectors.submitButton);
    
    if(variant && variant.available == true) {
      $button.removeAttr('disabled');
      _._updateButtonText($button, 'Default', variant);
    } else {
      $button.attr('disabled', 'disabled');
      if(variant) {
        _._updateButtonText($button, 'NoStock', variant);
      } else {
        _._updateButtonText($button, 'NoVariant', variant);
      }
    }
  }
  
  _.initProductOptions = function(originalSelect) {
    $(originalSelect).not('.theme-init').addClass('theme-init').each(function(){
      var $originalSelect = $(this);
      var productData = _.getProductData($originalSelect.closest('form'));
      
      // change state for original dropdown
      $originalSelect.on('change', function(e, variant){
        if($(this).is('input[type=radio]:not(:checked)')) {
          return; // handle radios - only update for checked
        }
        var variant = variant;
        if(!variant && variant !== false) {
          for(var i=0; i<productData.variants.length; i++) {
            if(productData.variants[i].id == $(this).val()) {
              variant = productData.variants[i];
            }
          }
        }
        var $container = $(this).closest(_.selectors.container);
        
        // update price
        _.updatePrice(variant, $container);
        
        // update buttons
        _.updateButtons(variant, $container);

        // variant images
        if (variant && variant.featured_image) {
          $container.find(_.selectors.gallery).trigger('variantImageSelected', variant);
        }

        // extra details
        _.updateBarcode(variant, $container);
        _.updateSku(variant, $container);
        _.updateBackorder(variant, $container);

        // variant urls
        var $form = $(this).closest('form');
        if($form.data('enable-history-state')) {
          _.addVariantUrlToHistory(variant);
        }

        // multi-currency
        if(typeof Currency != 'undefined' && typeof Currency.convertAll != 'undefined' && $('[name=currencies]').length) {
          Currency.convertAll(shopCurrency, $('[name=currencies]').first().val());
          $('.selected-currency').text(Currency.currentCurrency);
        }
      });

      // split-options wrapper
      $originalSelect.closest(_.selectors.container).find(_.selectors.multiOption).on('change', 'select', function(){
        var selectedOptions = [];
        $(this).closest(_.selectors.multiOption).find('select').each(function(){
          selectedOptions.push($(this).val());
        });
        // find variant
        var variant = false;
        for(var i=0; i<productData.variants.length; i++) {
          var v = productData.variants[i];
          var matchCount = 0;
          for(var j=0; j<selectedOptions.length; j++) {
            if(v.options[j] == selectedOptions[j]) {
              matchCount++;
            }
          }
          if(matchCount == selectedOptions.length) {
            variant = v;
            break;
          }
        }
        // trigger change
        if(variant) {
          $originalSelect.val(variant.id);
        }
        $originalSelect.trigger('change', variant);
      });
      
      // first-run
      $originalSelect.trigger('change');
    });
  }
};

/// Cookie management
theme.createCookie = function(name,value,days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
};
theme.readCookie = function(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
};
theme.eraseCookie = function(name) {
    theme.createCookie(name,"",-1);
};

$(function($){
  
  /// Extensions
  
  $.fn.replaceImageWithOneOfNewSrc = function(newSrc) {
    //Avoids blank.gif breaking imagesLoaded with Firefox event bug
    var newTag = $(this).clone().wrap('<div />').parent().html();
    newTag = newTag.replace(/(src=")([^"]*)/gi, "$1" + newSrc);
    var $newTag = $(newTag);
    $(this).after($newTag).remove();
    return $newTag;
  };
  
  //Fade out image, replace src, fade back in when loaded
  $.fn.fadeToAnotherImage = function(newSrc, callback){
    var $img = $(this);
    var oldHeight = $img.height();
    var doFade = !$img.parent().hasClass('heightkeeper') && $img.attr('src') != newSrc;
    if(doFade) {
      $img.wrap(
        $('<div class="heightkeeper" />').css({ height: oldHeight, overflow: 'hidden' })
      ).stop(true,true).animate({opacity:0}, 200, function(){
        $img = $img.replaceImageWithOneOfNewSrc(newSrc);
        $img.imagesLoaded(function(){
          $img.stop(true,true).animate({opacity:1}, 200);
          $img.parent().stop(true,true).animate({height: $img.height()}, 300, function(){
            $img.unwrap();
            if(callback) callback($img);
          });
        });
      });
      return true;
    } else {
      return false;
    }
  };
  
  function isMobile() {
    return $(window).width() < 768; //blunt check for mobile view
  }
  
  /// Init product options
  $(document).on('initproductform', '.product-form', function(){
    /// Product options
    theme.OptionManager.initProductOptions($('select[name="id"]'));

    // Product form button-options
    var toMakeClicky = ',' + $(this).find('.option-selectors').data('box-options') + ',';
    var $clickies = $('.selector-wrapper:not(.has-clickyboxes) select', this).filter(function(){
      return toMakeClicky.indexOf(',' +$(this).siblings('label').html() + ',') >= 0;
    }).clickyBoxes().parent().addClass('has-clickyboxes');

    // If only one variant option, add sold-out states to clicky boxes
    if($clickies.length == 1) {
      var productData = theme.OptionManager.getProductData($(this));

      if(productData.options.length == 1) {
        for(var i=0; i<productData.variants.length; i++) {
          if(!productData.variants[i].available) {
            $('.selector-wrapper.has-clickyboxes .clickyboxes li:eq('+i+') a', this).addClass('unavailable');
          }
        }
      }
    }

    /// Style up select-dropdowns
    $('select:not([name=id])', this).selectReplace().closest('.selector-wrapper').addClass('has-pretty-select');

    /// In lightbox? resize after any content changes
    if($(this).closest('.quickbuy-form').length) {
      $(this).find('select[name=id]').on('change', function(){
        setTimeout(function(){
          $.colorbox.resize();
        }, 10);
      });
    }
  });
  
  /// Style dropdowns (outside of the product form)
  $('select:not([name=id])').filter(function(){
    $(this).closest('.product-form').length == 0
  }).selectReplace();
  
  /// Uncontained images
  theme.uncontainImages($('body'));
  
  /// General lightbox popups
  $('a[rel=lightbox]').colorbox({ minWidth: '200', maxWidth: '96%', maxHeight: '96%' });

  // Size Guide popup
  $('a[data-size-guide]').colorbox({ inline: true, minWidth: '200', width: '96%', maxWidth: '600', height: '96%', maxHeight: '600'})
  
  /// Any section load
  $(document).on('shopify:section:load', function(e){
 
    /// Handle special wide images - available inside any rich text content
    theme.uncontainImages(e.target);
 
  });
  
  
  /// Mobile sub-nav
  var navStack = [];
  $(document).on('click', '#mobile-nav .open-sub-nav', function(){
    // hide current & add to stack
    navStack.push($('#mobile-nav .inner:not(.hide), #mobile-nav .sub-nav.show:not(.hide)').addClass('hide'));
    // show new
    $('#mobile-nav .sub-nav[data-is-subnav-for="'+$(this).data('sub-nav')+'"]').first().addClass('show');
    return false;
  }).on('click', '#mobile-nav .close-sub-nav', function(){
    // hide current
    $(this).closest('.sub-nav').removeClass('show');
    // reveal last seen & pop off stack
    var popped = navStack.pop().removeClass('hide');
    /*if($('#mobile-nav .sub-nav.show.hide').removeClass('hide').length == 0) {
      $('#mobile-nav .inner').removeClass('hide');
      }*/
    return false;
  }).on('click', '#mobile-nav a.nav-item-link[href=#]', function(){
    // #-link opens child nav
    $(this).closest('li').find('button').click();
    return false;
  });
  
  
  /// Dropdowns that redirect
  $(document).on('change', 'select.redirect', function(){
    window.location = $(this).val();
  });
  
  
  /// Custom share buttons
  $(document).on('click', '.sharing a', function(e){
    var $parent = $(this).parent();
    if($parent.hasClass('twitter')) {
      e.preventDefault();
      var url = $(this).attr('href');
      var width  = 575,
          height = 450,
          left   = ($(window).width()  - width)  / 2,
          top    = ($(window).height() - height) / 2,
          opts   = 'status=1, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0' +
          ',width='  + width  +
          ',height=' + height +
          ',top='    + top    +
          ',left='   + left;
      window.open(url, 'Twitter', opts);

    } else if($parent.hasClass('facebook')) {
      e.preventDefault();
      var url = $(this).attr('href');
      var width  = 626,
          height = 256,
          left   = ($(window).width()  - width)  / 2,
          top    = ($(window).height() - height) / 2,
          opts   = 'status=1, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0' +
          ',width='  + width  +
          ',height=' + height +
          ',top='    + top    +
          ',left='   + left;
      window.open(url, 'Facebook', opts);

    } else if($parent.hasClass('pinterest')) {
      e.preventDefault();
      var url = $(this).attr('href');
      var width  = 700,
          height = 550,
          left   = ($(window).width()  - width)  / 2,
          top    = ($(window).height() - height) / 2,
          opts   = 'status=1, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0' +
          ',width='  + width  +
          ',height=' + height +
          ',top='    + top    +
          ',left='   + left;
      window.open(url, 'Pinterest', opts);

    } else if($parent.hasClass('google')) {
      e.preventDefault();
      var url = $(this).attr('href');
      var width  = 550,
          height = 450,
          left   = ($(window).width()  - width)  / 2,
          top    = ($(window).height() - height) / 2,
          opts   = 'status=1, toolbar=0, location=0, menubar=0, directories=0, scrollbars=0' +
          ',width='  + width  +
          ',height=' + height +
          ',top='    + top    +
          ',left='   + left;
      window.open(url, 'Google+', opts);

    }
  });
  
  
  /// Toggle classes
  
  $(document).on('click', '[data-toggle-class]', function(e){
    e.preventDefault();
    var spl = $(this).data('toggle-class').split('|');
    $(spl[1]).toggleClass(spl[0]);
    $(window).trigger('resize');
  });
  
  
  /// Close side-modals
  
  function sideModTransOutHelper() {
    //Speed up
    $('body').addClass('sidepanel-transitioning');
    setTimeout(function(){
      $('body').removeClass('sidepanel-transitioning');
    }, 510);
  }
  function fixedNavWebkitHack() {
    if($('body').hasClass('show-mobile-nav') || $('body').hasClass('show-cart-summary')) {
      $('.toolbar.docked').css({
        position: 'absolute',
        top: $(window).scrollTop(),
        left: -15,
        right: -15,
        width: 'auto'
      });
    } else {
      setTimeout(function(){
        $('.toolbar.docked').css({
          position: '', top: '', left: '', right: '', width: ''
        });
      }, 500);
    }
  }
  $(document).on('click', '#page-overlay', function(){
    sideModTransOutHelper();
    $('body').removeClass('show-cart-summary show-mobile-nav');
    fixedNavWebkitHack();
    return false;
  });
  
  
  /// Toggles for side-modals
  
  $(document).on('click', '.toggle-mob-nav', function(){
    //prep for reveal
    $('#cart-summary').removeClass('active');
    $('#mobile-nav').addClass('active');
    //toggle
    if(!$('body').toggleClass('show-mobile-nav').hasClass('show-mobile-nav')) {
      sideModTransOutHelper();
    }
    fixedNavWebkitHack();
    return false;
  });
  {% if settings.use_side_cart_summary %}
  $(document).on('click', '.toggle-cart-summary', function(){
    //prep for reveal
    $('#mobile-nav').removeClass('active');
    $('#cart-summary').addClass('active');
    //toggle
    if(!$('body').toggleClass('show-cart-summary').hasClass('show-cart-summary')) {
      sideModTransOutHelper();
    }
    fixedNavWebkitHack();
    return false;
  });
  {% endif %}
  
  
  
  // Ensuring sub nav dropdown does not go off the RHS of page
  $(window).on('debouncedresize load ensuredropdownposition', function(){
    setTimeout(function(){
      var pw = $('#page-wrap-inner').width();
      var bw = parseInt($('#page-wrap-inner').css('border-left-width'));
      if(isNaN(bw)) bw = 0;
      $('.main-nav .nav-item.drop-norm .sub-nav').css('transform', '').each(function(){
        $(this).css({ visibility: 'hidden', zIndex: -1 }).css({ display: 'block' });
        var oobr = pw - ($(this).offset().left + $(this).outerWidth() - bw);
        var oobl = $(this).offset().left - bw;
        if(oobr < 0) {
          // off the right
          $(this).css('transform', 'translate('+Math.ceil(oobr-1)+'px)');
        } else if(oobl < 0) {
          // off the left
          $(this).css('transform', 'translate('+Math.ceil(-oobl)+'px)');
        }
        $(this).css({ visibility: '', zIndex: '', display: '' });
      });
    }, 50);
  });

  /// Nav images
  
  //Preload sub-nav images on show, and load first one
  $(document).on('mouseenter', '.main-nav .nav-item.dropdown', function(){
    $(this).find('.sub-nav-item-link[data-img]').each(function(){
      $('<img/>')[0].src = $(this).data('img');
    }).first().trigger('loadimg');
  });
  
  
  /// In-page links
  
  $(document).on('click', 'a[href^="#"]:not([href="#"])', function(){
    var $target = $($(this).attr('href')).first();
    if($target.length == 1) {
      $('html:not(:animated),body:not(:animated)').animate({
        scrollTop: $target.offset().top
      }, 500 );
    }
    return false;
  });
  
  
  /// Revealables (sharing, cart in header, sidebar)
  
  $(document).on('click', '[data-revealable]', function(){
    $(this).closest($(this).data('revealable')).toggleClass('show');
    $(window).trigger('resize');
    return false;
  });
  
  
  /// Show a short-lived text popup above an element
  window.showQuickPopup = function(message, $origin){
    var $popup = $('<div class="simple-popup"/>');
    var offs = $origin.offset();
    $popup.html(message).css({ 'left':offs.left, 'top':offs.top }).hide();
    $('body').append($popup);
    $popup.css({ marginTop: - $popup.outerHeight() - 10, marginLeft: -($popup.outerWidth()-$origin.outerWidth())/2});
    $popup.fadeIn(200).delay(3500).fadeOut(400, function(){
      $(this).remove();
    });
  };
  
  
  /// Ajax product forms
  var shopifyAjaxAddURL = '/cart/add.js';
  var shopifyAjaxCartURL = '/cart.js';
  var shopifyAjaxStorePageURL = '/search';
  
  function updateCartSummaries(showCartSummary) {
    $.get(shopifyAjaxStorePageURL, function(data){
      var selectors = ['.toolbar-cart', '#cart-summary'];
      var $parsed = $($.parseHTML('<div>' + data + '</div>'));
      for(var i=0; i<selectors.length; i++) {
        var cartSummarySelector = selectors[i];
        var $newCartObj = $parsed.find(cartSummarySelector).clone();
        var $currCart = $(cartSummarySelector);
        $currCart.replaceWith($newCartObj);
      }
      {% if settings.use_side_cart_summary %}
      //Show cart dropdown, if on a product page
      if(showCartSummary) {
        $('body').addClass('show-cart-summary');
      }
      {% endif %}
    });
  }
  
  {% if settings.prod_ajax == 'ajax' %} 
  $(document).on('submit', 'form[action="/cart/add"]:not(.noAJAX)', function(e) {
    var $form = $(this);
    //Disable add button
    $form.find(':submit').attr('disabled', 'disabled').each(function(){
      var contentFunc = $(this).is('button') ? 'html' : 'val';
      $(this).data('previous-value', $(this)[contentFunc]())[contentFunc]({{ 'products.product.adding_to_cart' | t | json }});
    });
    
    //Add to cart
    $.post(shopifyAjaxAddURL, $form.serialize(), function(itemData) {
      theme.createCookie('theme_added_to_cart','justnow',1);
      
      //Enable add button
      var $btn = $form.find(':submit').each(function(){
        var $btn = $(this);
        var contentFunc = $(this).is('button') ? 'html' : 'val';
        //Set to 'DONE', alter button style, wait a few secs, revert to normal
        $btn[contentFunc]({{ 'products.product.added_to_cart_btn' | t | json }});
        setTimeout(function(){
          $btn.removeAttr('disabled')[contentFunc]($btn.data('previous-value'));
        }, 4000);
      }).first();
      
      //Update persistent cart summaries
      updateCartSummaries($form.closest('.quickbuy-form').length == 0);
      
    }, 'text').error(function(data) {
      //Enable add button
      var $firstBtn = $form.find(':submit').removeAttr('disabled').each(function(){
        var $btn = $(this);
        var contentFunc = $btn.is('button') ? 'html' : 'val';
        $btn[contentFunc]($btn.data('previous-value'))
      }).first();
      
      //Not added, show message
      if(typeof(data) != 'undefined' && typeof(data.status) != 'undefined') {
        var jsonRes = $.parseJSON(data.responseText);
        window.showQuickPopup(jsonRes.description, $firstBtn);
      } else {
        //Some unknown error? Disable ajax and submit the old-fashioned way.
        $form.addClass('noAJAX');
        $form.submit();
      }
    });
    return false;
  });
  
  /// Reload cart summary, if we added something on the previous page (in response to back-button use)
  if(typeof theme.readCookie('theme_added_to_cart') != 'undefined' && theme.readCookie('theme_added_to_cart') == 'justnow') {
    theme.eraseCookie('theme_added_to_cart');
    updateCartSummaries(false);
  }
  {% endif %}
  
  
  /// Side-cart quantities
  
  $(document).on('change', '#cart-summary .cart-summary-item input', function(){
    var $statusDivs = $(this).closest('.cart-summary-item').add('#cart-summary').addClass('updating');
    var quantities = [];
    $('#cart-summary .cart-summary-item input').each(function(){
      quantities.push($(this).val());
    });
    $.post('/cart/update.js', { updates: quantities }, function(data){
      //Update total
      $('#cart-summary .cart-summary-subtotal .amount').html(Shopify.formatMoney(data.total_price, theme.money_format));
      //Remove if qty=0
      $('#cart-summary .cart-summary-item input').filter(function(){ return $(this).val() == 0 }).closest('.cart-summary-item').animate({ opacity: 0 }, 250, function(){ $(this).remove() });
      updateCartSummaries();
    }, 'json').always(function(){
        $statusDivs.removeClass('updating')
   	});
  });
  
  
  /// Heights in grids
  
  $(window).on('debouncedresize load normheights', function(){
    $('[data-normheights]').each(function(){
      var $items = $(this).find($(this).data('normheights')),
          childFilter = $(this).data('normheights-inner'),
          tallest = 0,
          lastYOffset = 0,
          row = [];
      $items.each(function(index){
        var $img = $(this).find(childFilter);
        var yOffset = $(this).position().top;
        if(index == 0) {
          lastYOffset = yOffset;
        } else if(yOffset != lastYOffset) {
          $(row).css('min-height', tallest);
          yOffset = $(this).position().top;
          row.length = 0;
          tallest = 0;
        }
        lastYOffset = yOffset;
        row.push(this);
        var h = $img.height();
        if(h > tallest) tallest = h;
      });
      $(row).css('min-height', tallest);
    });
  }).trigger('normheights');
  
  /// Gallery variant images
  $(document).on('variantImageSelected', '.product-gallery', function(e, data){
    var variantSrc = data.featured_image.src.split('?')[0].replace(/http[s]?:/, '');
    $('.thumbnails a.thumbnail', this).filter('[href^="' + variantSrc + '"]').trigger('click');
  });
  
  /// Product gallery zoom
  $(document).on('initzoom', '.product-gallery[data-enable-zoom="true"]', function(){
    if(!isMobile()) {
      var $img = $(this).find('.main .main-img-link').trigger('zoom.destroy');
      $img.zoom({ url: $img.attr('href') });
    }
  });
  
  /// Product gallery lightbox
  
  $(document).on('click', '.product-gallery .main a.main-img-link', function(){
    //Don't do anything if the screen isn't very large. Otherwise, lightbox ahoy...
    if($(window).height() >= 580 && $(window).width() >= 768) {
      var $prodPhotoCont = $(this).closest('.product-gallery');
      if($prodPhotoCont.find('img:not(.zoomImg)').length == 1) {
        //One image only?
        $.colorbox({ href:$(this).attr('href'), minWidth: '200', maxWidth:'96%', maxHeight:'96%' });
      } else {
        //Many images. Dupe thumbs to create a faux-gallery
        $('#gallery-cont').remove();
        var $galleryCont = $('<div id="gallery-cont"/>').append(
          $prodPhotoCont.find('.thumbnails a').clone().attr({ rel: 'gallery', title: '' })
        ).hide().appendTo('body');
        //Trigger box (on the right one)
        $galleryCont.children().colorbox({minWidth: '200', maxWidth:'96%', maxHeight:'96%'}).filter('[href="'+$(this).attr('href')+'"]').first().click();
      }
    }
    return false;
  });
  
  
  /// Product gallery
  
  $(document).on('click', '.product-gallery .thumbnails .thumbnail', function(e){
    e.preventDefault();
    var $photoCont = $(this).closest('.product-gallery');
    var $imgToChange = $photoCont.find('.main img.main-img');
    if($imgToChange.attr('alt', $(this).attr('title')).fadeToAnotherImage($(this).data('src'), function($img){
      //After new image has loaded
      $photoCont.trigger('initzoom');
      if($photoCont.closest('.quickbuy-form').length > 0) {
        $.colorbox.resize();
      }
    })) {
      $photoCont.find('.main .main-img-link').trigger('zoom.destroy').attr({ href: $(this).attr('href'), title: $(this).attr('title') });
      $(this).addClass('active').siblings('.active').removeClass('active');
    }
  });
  
  
 /// Quick buy
  var activeQuickBuyRequest = null;
  
  $(document).on('click', '.product-block .quick-buy', function(e){
    
    if (activeQuickBuyRequest) {
     return false;
    }
    
    var $prod = $(this).closest('.product-block');    
    var placeholder = $prod.find('.quickbuy-placeholder-template').html();
    var $template = $('<div class="quickbuy-container">'+placeholder+'</div>');
    var prevIndex = $prod.index('.product-block') - 1;
    var nextIndex = $prod.index('.product-block') + 1;
    
    if(nextIndex > $prod.siblings('.product-block').length) {
      nextIndex = -1;
    }
    
    $.colorbox({
    	closeButton: false,
        preloading: false,
      	open: true,
      	speed: 200,
     	//transition: "none",
      	html: ['<div class="action-icons">',
               '<a href="#" class="prev-item action-icon" data-idx="',prevIndex,'">'+theme.icons.left+'</span></a>',
               '<a href="#" class="next-item action-icon" data-idx="',nextIndex,'">'+theme.icons.right+'</a>',
               '<a href="#" class="close-box action-icon">'+theme.icons.close+'</a>',
               '</div>', $template.wrap('<div>').parent().html()].join(''),
	    onComplete: loadQuickBuyContent($(this).attr('href'))
    });
    
    e.stopImmediatePropagation();
    return false;
  });
  
  var loadQuickBuyContent = function(href) {
    if(href.indexOf('?') > -1) {
      href += '&view=lightbox'; // in theme editor
    } else {
      href += '?view=lightbox';
    }
    activeQuickBuyRequest = $.get(href, function(data){
      	
      	var $form = $('<div class="quickbuy-form quickbuy-form--overlay">'+ data +'</div>');
      	$('.quickbuy-container').append($form);
      
     	//Init product form, if required 
      	$(document).find('.product-form').trigger('initproductform');
      	
      	$('.quickbuy-form').imagesLoaded(function(){
      		$('.product-gallery').trigger('initzoom');
        	setTimeout($.colorbox.resize, 10);
      	});
      
      	$form.hide().fadeIn(500, function() {
          $('.quickbuy-form.placeholder').remove();
          $form.removeClass('quickbuy-form--overlay');
          
          $.colorbox.resize();
      	});
      	
      	activeQuickBuyRequest = null;
    });
  }
  
  $(document).on('click', '#colorbox .action-icons .close-box', function(){
    $.colorbox.close();
    return false;
  }).on('click', '#colorbox .action-icons .prev-item, #colorbox .action-icons .next-item', function(){
    $('.product-block:eq('+$(this).data('idx')+') .quick-buy').click();
    return false;
  });
  
  
  /// Image tile section
  
  $(document).on('render', '.tile-group', function(){
    //Vars
    var $section = $(this);
    var $imgs = $(this).find('img, svg');
    
    var rows = [], 
        sectionHeight = 0, 
        margin = $(this).data('tiles-margin'),
        originalPerRow = $(this).data('tiles-per-row');
    var margin_px = $section.width() * margin/100.0;
    var row_size = Math.max(1, $(this).width() >= 768 ? originalPerRow : Math.min(2, originalPerRow));
    if($(this).width() < 400) {
      row_size = 1;
    }
    
    //Split into rows
    while ($imgs.length > 0) {
      var $row = $($imgs.splice(0, row_size));
      rows.push($row);
    }
    
    //Only need to recalculate the widths and x-offsets if the layout changes
    for(var r=0; r<rows.length; r++) {
      var $rowImgs = rows[r];
      //Calc ratios & % widths
      var totalFracWidth = 0;
      for(var i=0; i<$rowImgs.length; i++) {
        var wh_ratio = $($rowImgs[i]).width() / $($rowImgs[i]).height();
        $($rowImgs[i]).data('wh_ratio', wh_ratio);
        totalFracWidth += wh_ratio;
      }
      //Add on margin
      totalFracWidth += totalFracWidth * (($rowImgs.length-1) * margin / 100.0);
      //Set vals
      var xOffset = 0;
      for(var i=0; i<$rowImgs.length; i++) {
        var thisWidth = (($($rowImgs[i]).data('wh_ratio')/totalFracWidth) * 100);
        $($rowImgs[i]).closest('.tile').css({
          top: sectionHeight,
          left: xOffset + '%',
          width: thisWidth + '%'
        });
        xOffset += thisWidth + margin;
      }
      //Calc height
      sectionHeight += $($rowImgs[0]).height() + margin_px;
	}
    $section.height(sectionHeight - margin_px);
  });
  $(window).on('load debouncedresize', function(){ $('.tile-group').trigger('render'); });


  /// Select contents on focus

  $(document).on('focusin click', 'input.select-on-focus', function(){
    $(this).select();
  }).on('mouseup', 'input.select-on-focus', function(e){
    e.preventDefault(); //Prevent mouseup killing select()
  });



  /// Search in header - for visual effect

  $(document).on('focusin focusout', '.toolbar .search-form input', function(e){
    $(this).closest('.search-form').toggleClass('focus', e.type == 'focusin');
  });


  /// Docked mobile nav

  var prevNavMargin = 0;
  var prevScroll = $(window).scrollTop();
  $(window).on('debouncedresize load handledockednav', function(){
    var $dockedMobNav = $('#toolbar'),
        mobNavHeight = $dockedMobNav.outerHeight();
    
    $dockedMobNav.toggleClass('docked', $('.toolbar:first').css('min-height') == '1px');
    if($dockedMobNav.hasClass('docked')) {
      mobNavHeight = $dockedMobNav.outerHeight();
    } else {
      mobNavHeight = '';
    }
    $('.page-header').css('padding-top', mobNavHeight);
  });

  $(window).on('scroll handledockednav', function(){
    var $dockedMobNav = $('#toolbar'),
        mobNavHeight = $dockedMobNav.outerHeight();
    
    var scroll = $(window).scrollTop();
    if(scroll < mobNavHeight) {
      $dockedMobNav.css('top', 0);
    } else {
      prevNavMargin += prevScroll - scroll;
      prevNavMargin = Math.min(Math.max(-mobNavHeight, prevNavMargin), 0);
      $dockedMobNav.css('top', prevNavMargin);
    }
    prevScroll = scroll;
  });


  
  
  /// Page height assessment
  
  $(window).on('debouncedresize load setminheight', function(){
    // inner wrap contains the border
    var $innerWrap = $('#page-wrap-inner').css('min-height', $(window).height());
  }).trigger('setminheight');
    
  /// Translations for colorbox
  $.extend($.colorbox.settings, {
    previous: {{ 'products.gallery.previous' | t | json }},
    next: {{ 'products.gallery.next' | t | json }},
    close: {{ 'products.gallery.close' | t | json }}
  });
  
  /// Register all sections
  theme.Sections.init();
  theme.Sections.register('slideshow', theme.SlideshowSection);
  theme.Sections.register('instagram', theme.InstagramSection);
  theme.Sections.register('video', theme.VideoManager);
  theme.Sections.register('header', theme.HeaderSection);
  theme.Sections.register('tiled-images', theme.TiledImagesSection);
  theme.Sections.register('featured-blog', theme.FeaturedBlogSection);
  theme.Sections.register('collection-template', theme.CollectionTemplateSection);
  theme.Sections.register('product-template', theme.ProductTemplateSection);
  theme.Sections.register('blog-template', theme.BlogTemplateSection);
  theme.Sections.register('collection-listing', theme.CollectionListingSection);
  theme.Sections.register('featured-collection', theme.FeaturedCollectionSection);
  theme.Sections.register('search-template', theme.SearchTemplateSection);
  theme.Sections.register('countdown', theme.CountdownSection);
  
});

var links = document.links;
for (let i = 0, linksLength = links.length ; i < linksLength ; i++) {
  if (links[i].hostname !== window.location.hostname) {
    links[i].target = '_blank';
    links[i].rel = 'noreferrer noopener';
  }
}
